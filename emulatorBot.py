import threadingimport logging as logimport timeimport numpyimport osimport cv2import subprocessfrom PIL import Imagefrom comparator import CompareImage# --------# PATHSSFTOOL_DIR_PATH = os.path.dirname(__file__)IMAGES_DIR_PATH = os.path.join(SFTOOL_DIR_PATH, "images")ORIGINAL_DIR_PATH = os.path.join(IMAGES_DIR_PATH, "original")# original constant images - readonly filesORIGINAL_TV_IMAGE_PATH = os.path.join(ORIGINAL_DIR_PATH, "colorTV.png")# Tavern homebuttonORIGINAL_MENU_BUTTON_IMAGE_PATH = os.path.join(IMAGES_DIR_PATH, "original", "menuButton.png")# list of close ad buttons as they may varyORIGINAL_CLOSE_AD_IMAGES_DIR_PATH = os.path.join(IMAGES_DIR_PATH, "closebuttons")ORIGINAL_CLOSE_AD_IMAGES_PATHS = [os.path.join(ORIGINAL_CLOSE_AD_IMAGES_DIR_PATH, file) for file in os.listdir(ORIGINAL_CLOSE_AD_IMAGES_DIR_PATH)]# Screenshot dirSCREENSHOT_DIR_PATH = os.path.join(IMAGES_DIR_PATH, "screenshots")SCREENSHOT_PATH_PREFIX = os.path.join(SCREENSHOT_DIR_PATH, "screenshot-")CROPPED_SCREENSHOT_PATH_PREFIX = os.path.join(SCREENSHOT_DIR_PATH, "cropped_screenshot-")# --------# Vars# Open ADTV_LOCATION = {'x': 188, 'y': 277}TV_IMAGE_DIMENSIONS = {'left': 110, 'top': 180, 'right': 275, 'bottom': 360}# Close ADCLOSE_AD_LOCATION = {'x': 1013, 'y': 55}CLOSE_AD_DIMENSIONS = {'left': 980, 'top': 30, 'right': 1050, 'bottom': 100}MENU_BUTTON_IMAGE_DIMENSIONS = {'left': 65, 'top': 1725, 'right': 210, 'bottom': 1865}# --------# Consts and globEMULATOR_KEY = "emulator"STATE_KEY = "state"IMAGE_EXTENSION = ".png"MENU_BUTTON_IMAGE_DIFF_THRESHOLD = 0.1TV_IMAGE_DIFF_THRESHOLD = 0.12CLOSE_AD_DIFF_THRESHOLD = 0.5# --------def take_screenshot(emulator_device):    start_time = time.time()    screenshot_path = SCREENSHOT_PATH_PREFIX + emulator_device[EMULATOR_KEY] + IMAGE_EXTENSION    adb_command = f"adb -s {emulator_device[EMULATOR_KEY]} exec-out screencap  -p > {screenshot_path}"    subprocess.run(adb_command, shell=True, check=True)    end_time = time.time()  # Record the end time    execution_time = end_time - start_time    logging.debug(f"[{emulator_device[EMULATOR_KEY]}]: Execution of sceenshot took: {execution_time:.6f} seconds")def crop_screenshot(emulator_device, dimensions):    start_time = time.time()    image_before_crop = Image.open(SCREENSHOT_PATH_PREFIX + emulator_device[EMULATOR_KEY] + IMAGE_EXTENSION)    cropped_image = image_before_crop.crop((dimensions['left'], dimensions['top'], dimensions['right'], dimensions['bottom']))    cropped_image.save(CROPPED_SCREENSHOT_PATH_PREFIX + emulator_device[EMULATOR_KEY] + IMAGE_EXTENSION)    end_time = time.time()  # Record the end time    execution_time = end_time - start_time    logging.debug(f"[{emulator_device[EMULATOR_KEY]}]: Execution of crop took: {execution_time:.6f} seconds")def click_on_ad(emulator_device):    logging.debug(f"[{emulator_device[EMULATOR_KEY]}]: clicking AD")    perform_click(emulator_device, TV_LOCATION['x'], TV_LOCATION['y'])def click_exit_ad(emulator_device):    logging.debug(f"[{emulator_device[EMULATOR_KEY]}]: exiting AD")    perform_click(emulator_device, CLOSE_AD_LOCATION['x'], CLOSE_AD_LOCATION['y'])def perform_click(emulator_device, x_pos, y_pos):    adb_command = f"adb -s {emulator_device[EMULATOR_KEY]} shell input tap {x_pos} {y_pos}"    subprocess.run(adb_command, shell=True)def get_emulators():    emulator_devices = []    adb_command = f"adb devices"    result = subprocess.run(adb_command, capture_output=True, text=True, check=True, shell=True)    if len(result.stdout) > 0:        for line in result.stdout.split("\n"):            if EMULATOR_KEY in line:                emulator_devices.append({EMULATOR_KEY: line.split("\t")[0], STATE_KEY: line.split("\t")[1]})    return emulator_devicesdef is_emulator_attached(emulator_device):    if emulator_device['state'] == "offline":        logging.error(f"[{emulator_device['emulator']}] IS OFFLINE")        exit(1)    else:        logging.debug(f"[{emulator_device['emulator']}] is attached")        return Truedef are_images_similar(emulator_device, first_image, second_image, threshhold):    start_time = time.time()  # Record the start time    compare_image = CompareImage(first_image, second_image)    image_difference = compare_image.compare_image()    logging.debug(f"[{emulator_device[EMULATOR_KEY]}]: Image ({first_image.split('/')[-1]}) is different from ({second_image.split('/')[-1]}) by: {image_difference} units (less = more similar)")    end_time = time.time()  # Record the end time    execution_time = end_time - start_time    logging.debug(f"[{emulator_device[EMULATOR_KEY]}]: Execution of compare took: {execution_time:.6f} seconds")    return image_difference < threshholddef is_close_ad_present(emulator_device):    take_screenshot(emulator_device)    crop_screenshot(emulator_device, CLOSE_AD_DIMENSIONS)    cropped_screenshot_path = CROPPED_SCREENSHOT_PATH_PREFIX + emulator_device[EMULATOR_KEY] + IMAGE_EXTENSION    for image in ORIGINAL_CLOSE_AD_IMAGES_PATHS:        if are_images_similar(emulator_device, cropped_screenshot_path, image, CLOSE_AD_DIFF_THRESHOLD):            return True    return Falsedef is_ad_present(emulator_device):    take_screenshot(emulator_device)    crop_screenshot(emulator_device, TV_IMAGE_DIMENSIONS)    cropped_screenshot_path = CROPPED_SCREENSHOT_PATH_PREFIX + emulator_device[EMULATOR_KEY] + IMAGE_EXTENSION    return are_images_similar(emulator_device, cropped_screenshot_path, ORIGINAL_TV_IMAGE_PATH, TV_IMAGE_DIFF_THRESHOLD)def is_in_tavern(emulator_device):    take_screenshot(emulator_device)    crop_screenshot(emulator_device, MENU_BUTTON_IMAGE_DIMENSIONS)    cropped_screenshot_path = CROPPED_SCREENSHOT_PATH_PREFIX + emulator_device[EMULATOR_KEY] + IMAGE_EXTENSION    return are_images_similar(emulator_device, cropped_screenshot_path, ORIGINAL_MENU_BUTTON_IMAGE_PATH, MENU_BUTTON_IMAGE_DIFF_THRESHOLD)def wait_for_exit_ad(emulator_device):    while True:        if is_close_ad_present(emulator_device) and not is_in_tavern(emulator_device):            click_exit_ad(emulator_device)            time.sleep(1)        elif is_in_tavern(emulator_device):            logging.debug(f"[{emulator_device[EMULATOR_KEY]}]: is already in tavern")            break        else:            logging.debug(f"[{emulator_device[EMULATOR_KEY]}]: is waiting for AD to end")def check_adb_installed():    try:        adb_command = "adb --version"        result = subprocess.run(adb_command, shell=True, capture_output=True)        if "Android Debug Bridge" in str(result.stdout):            logging.debug("ADB is installed.")        else:            raise Exception    except Exception:        logging.warning("ADB is not installed. Please use: brew install android-platform-tools")        exit(1)def check_device_loop(emulator):    logging.info(f"Running loop for: {emulator}")    while True:        # check if its online        if is_emulator_attached(emulator):            # ads only            if is_ad_present(emulator) and is_in_tavern(emulator):                logging.debug(f"[{emulator[EMULATOR_KEY]}]: has AD")                click_on_ad(emulator)                wait_for_exit_ad(emulator)            else:                if is_close_ad_present(emulator):                    wait_for_exit_ad(emulator)                elif is_in_tavern(emulator):                    logging.debug(f"[{emulator[EMULATOR_KEY]}]: has NO AD")        else:            logging.debug(f"[{emulator[EMULATOR_KEY]}]: is offline")            breakif __name__ == '__main__':    # ---------------------------------    #  Logger    logging = log.getLogger(__name__)    syslog = log.StreamHandler()    formatter = log.Formatter('[%(levelname)s](%(name)s): %(message)s')    syslog.setFormatter(formatter)    logging.setLevel(log.DEBUG)    logging.addHandler(syslog)    logging = log.LoggerAdapter(logging, extra={'app_name': 'embot'})    logging.info("Started bot")    # ---------------------------------    thread_list = []    emulator_device_list = []    # check installed adb    check_adb_installed()    # get all emulators and check their state    emulator_device_list = get_emulators()    if len(emulator_device_list) == 0:        logging.error("No running emulators, exiting now.")        exit(1)    for device in emulator_device_list:        thread = threading.Thread(target=check_device_loop, args=(device,))        thread.start()        thread_list.append(thread)    try:        while True:            pass    except KeyboardInterrupt:        logging.debug("Program status: Ending program.")        for thread in thread_list:            thread.join()