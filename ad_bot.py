import timeimport threadingfrom common import constants as constfrom common.custom_logger import logger, DEBUG_LEVELfrom common import common_utils as utildef crop_ad(emulator_device):    util.crop_screenshot(emulator_device, const.AD_BUTTON[const.DIMENSIONS_KEY], const.AD_BUTTON[const.NAME_KEY])def click_on_ad(emulator_device):    logger.debug(f"[{emulator_device.serial}]: clicking AD")    ad_click_location = const.AD_BUTTON[const.CLICK_LOCATION_KEY]    emulator_device.click(ad_click_location[const.X_KEY], ad_click_location[const.Y_KEY])def is_ad_present(emulator_device):    logger.debug(f"[{emulator_device.serial}]: Looking for AD")    return util.are_images_similar(emulator_device,                                   util.get_cropped_screenshot_path(emulator_device, const.AD_BUTTON[const.NAME_KEY]),                                   const.AD_BUTTON[const.DIMENSIONS_KEY],                                   const.TV_IMAGE_DIFF_THRESHOLD)def watch_ad_and_close_after(emulator_device):    click_on_ad(emulator_device)    time.sleep(1)    util.close_ad_if_playing(emulator_device)def check_device_loop(emulator):    logger.info(f"Running loop for: {emulator}")    while True:        if util.is_emulator_attached(emulator):            util.take_screenshot(emulator)            crop_ad(emulator)            if is_ad_present(emulator):                logger.info(f"[{emulator.serial}]: has AD")                watch_ad_and_close_after(emulator)            else:                util.close_ad_if_playing(emulator)        else:            logger.error(f"[{emulator.serial}]: is offline")            breakif __name__ == '__main__':    logger.setLevel(DEBUG_LEVEL)    logger.info("Started Shakes_AD_Bot")    # check installed adb    util.check_cli_tools_installed()    adb = util.get_adb_client()    emulator_device_list = adb.device_list()    thread_list = []    if len(emulator_device_list) == 0 or (len(emulator_device_list) == 1 and emulator_device_list[0].info == const.OFFLINE):        logger.error("No running emulators, exiting now.")        exit(1)    for device in emulator_device_list:        thread = threading.Thread(target=check_device_loop, args=(device,))        thread.start()        thread_list.append(thread)    try:        while True:            pass    except KeyboardInterrupt:        logger.debug("Program status: Ending program.")        for thread in thread_list:            thread.join()